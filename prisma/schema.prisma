generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum GameType {
  standard
  rapidplay
  blitz
}

enum Federation {
  FIDE
  ECF
  USCF
}

model PlayerRating {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  type       GameType
  federation Federation
  rating     Int
  playerId   Int
  player     Player     @relation(fields: [playerId], references: [id])

  @@index([playerId])
}

model Player {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  firstName  String
  lastName   String
  middleName String?
  teamId     Int?
  team       Team?          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  ratings    PlayerRating[]

  @@index([teamId])
}

model Team {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String    @unique
  players      Player[]
  divisionId   Int?
  division     Division? @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  homeFixtures Fixture[] @relation("HomeTeam")
  awayFixtures Fixture[] @relation("AwayTeam")

  @@index([divisionId])
}

model Division {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  leagueId  Int
  league    League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  fixtures  Fixture[]
  teams     Team[]

  @@index([leagueId])
}

model League {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique
  divisions Division[]
}

model Season {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  start     DateTime
  end       DateTime
  fixtures  Fixture[]
}

model Fixture {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  date       DateTime
  seasonId   Int
  season     Season   @relation(fields: [seasonId], references: [id])
  divisionId Int
  division   Division @relation(fields: [divisionId], references: [id])

  homeTeamId Int
  awayTeamId Int
  homeTeam   Team @relation(name: "HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam   Team @relation(name: "AwayTeam", fields: [awayTeamId], references: [id])

  @@index([seasonId])
  @@index([divisionId])
  @@index([homeTeamId])
  @@index([awayTeamId])
}

model Result {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Venue {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String
  address    String
  city       String
  postcode   String
  website    String?
  // https://github.com/prisma/prisma/issues/1798
  long       String?
  lat        String?
  image      String?
  facilities Facility[]
}

enum Facilities {
  PARKING
  BAR
  DRINKS
  SNACKS
}

model Facility {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  venueId     Int
  venue       Venue      @relation(fields: [venueId], references: [id])
  facility    Facilities
  description String?

  @@index([venueId])
}
